@page "/todolist/tasks/{CurrentPage:int?}"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ToDoAppDbContext> ContextFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<div class="background-grad p-5 m-5">
    <div class="alert alert-primary" role="alert">
        <h3 class="text-center">Todo List</h3>
    </div>

    <div class="d-grid gap-2">
        <button class="btn btn-primary" @onclick="redirectToAdd">Add a new task</button>
    </div>

    <hr />
    
    <ul class="pagination" mt-3>
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="/todolist/tasks/@(CurrentPage - 1)">Previous</a>
            </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="/todolist/tasks/@i">@i</a>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="/todolist/tasks/@(CurrentPage + 1)">Next</a>
            </li>
    </ul>
    
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Task</th>
            <th>Due</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach(var todoItem in ToDoItems)
        {
            <tr>
                <td>@todoItem.Name</td>
                <td>@todoItem.ExpiryDate</td>
                <td><button class="btn btn-info" @onclick="() => HandleDelete(todoItem)">Complete</button></td>
            </tr>
        }
        </tbody>
    </table>
    
    
</div>

<style type="text/css">

.background-grad{
    background-color: #293583;
    background-image: linear-gradient(160deg, #293583 0%, #60a93e 100%);

}
    
</style>


@code {
    [Parameter]
    public int? CurrentPage { get; set; }
    
   private ToDoItem[]? ToDoItems { get; set; }
    
    private int TotalPages { get; set; }
        
        private const int ItemsPerPage = 4;
    
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (CurrentPage is null or < 1)
        {
            CurrentPage = 1;
        }
        
        using var context = ContextFactory.CreateDbContext();
        
        var taskCount = await context.ToDoItems.CountAsync();
        TotalPages = taskCount == 0 ? 1 : (int)Math.Ceiling((double)taskCount /ItemsPerPage);
        
        var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;
        
        
        ToDoItems = await context.ToDoItems
            .OrderBy(tdi => tdi.ExpiryDate)
            .Skip(itemsToSkip)
            .Take(ItemsPerPage)
            .ToArrayAsync();

    }
    
    void redirectToAdd()
    {
        NavigationManager.NavigateTo("/todolist/addtask");
    }
    
    private async Task HandleDelete(ToDoItem todoItem)
    {
        var isOk = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to set {todoItem.Name} as complete?");
        
        if (isOk)
        {
            using var context = ContextFactory.CreateDbContext();
            context.ToDoItems.Remove(todoItem);
            await context.SaveChangesAsync();
            await LoadData();
        }
        
    }

}
